\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\@writefile{toc}{\contentsline {section}{\numberline {1}Motivation}{1}{section.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Design Goals}{1}{subsection.1.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}Subsystems}{1}{subsection.1.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces A Screenshot of \emph  {Schemer}, the working name for our debugging IDE. The graphical user interface handles the input and output of Scheme execution. Similar to using \emph  {Emacs} with MIT-Scheme, it is not a REPL. The user is free to place their cursor at any point in the document and execute commands anywhere and in any order. Like building with mud, the user has the freedom!}}{1}{figure.1}}
\newlabel{fig:overview}{{1}{1}{A Screenshot of \emph {Schemer}, the working name for our debugging IDE. The graphical user interface handles the input and output of Scheme execution. Similar to using \emph {Emacs} with MIT-Scheme, it is not a REPL. The user is free to place their cursor at any point in the document and execute commands anywhere and in any order. Like building with mud, the user has the freedom!}{figure.1}{}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Schemer, the IDE}{1}{section.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces The Highlight to Evaluate tool in \emph  {Schemer}. Simply select the text you want to execute, and you will see a preview of the value if you were to execute the command. However, the command does not really execute (from the user's perspective). Once they let go, if they were to just run the \lstinline {(+ x 1)} command, there would be an error: because \lstinline {x} is unbound.}}{2}{figure.2}}
\newlabel{fig:overview}{{2}{2}{The Highlight to Evaluate tool in \emph {Schemer}. Simply select the text you want to execute, and you will see a preview of the value if you were to execute the command. However, the command does not really execute (from the user's perspective). Once they let go, if they were to just run the \lstinline {(+ x 1)} command, there would be an error: because \lstinline {x} is unbound}{figure.2}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Major Subsystems / Debugging Tools}{2}{section.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Highlight to Evaluate}{2}{subsection.3.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Draggable Manipulation}{2}{subsection.3.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}Expression Investigation}{2}{subsection.3.3}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Contributions}{2}{section.4}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Downloadable Version}{3}{section.5}}
\@writefile{toc}{\contentsline {section}{\numberline {6}Acknowledgments}{3}{section.6}}
